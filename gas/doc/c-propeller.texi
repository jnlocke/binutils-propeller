@c Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
@c 2006, 2007, 2008, 2009, 2012  Free Software Foundation, Inc.
@c This is part of the GAS manual.
@c For copying conditions, see the file as.texinfo.

@ifset GENERIC
@page
@node Propeller-Dependent
@chapter Propeller Dependent Features
@end ifset

@ifclear GENERIC
@node Machine Dependencies
@chapter Propeller Dependent Features
@end ifclear

@cindex Propeller support
@menu
* Propeller Options::              Options
* Propeller Syntax::               Syntax
* Propeller Floating Point::       Floating Point
* Propeller Directives::           Propeller Machine Directives
* Propeller Opcodes::              Opcodes
@end menu

@node Propeller Options
@section Options
@cindex Propeller options (none)
@cindex options for Propeller (none)

@table @code

@cindex @code{-cmm} compressed code, Propeller
@item -cmm
This option indicates that code is to be compressed by
default. Normally the compression state is off by default. In either
case the default may be overridden by explicit @code{.compress}
directives.

Compressed mode code cannot be directly executed by the processor, but
must be interpreted by the CMM mode kernel. The compression uses a
number of techniques to reduce the code size by about half.

@cindex @code{-lmm} command line option, Propeller
@item -lmm
This option indicates that code is to be compiled for a large memory
model (LMM). Use this option also for the external memory model (XMM),
which is a form of LMM that uses external RAM instead of hub RAM. This
option enables several pseudo-opcodes, mainly for branching.

@cindex @code{-pasm} command line option, Propeller
@item -pasm
This changes the parser to make gas more compatible with the Propeller
PASM assembler. In particular, addresses will be treated as long word
addresses by default, rather than byte addresses. This is mainly
useful for compiling legacy code for COG memory; do not use it in
conjunction with LMM or CMM code.

@end table


@node Propeller Syntax
@section Syntax
@menu
* Propeller-Instruction-Set::      Instruction Set
* Propeller-Chars::                Special Characters
* Propeller-Regs::                 Register Names
@end menu

@node Propeller-Instruction-Set
@subsection Instruction Set Syntax
As far as possible, the GAS syntax for the Propeller family duplicates
the syntax of the Parallax assembler (PASM). Exceptions are noted below.

@table @code

@item
Conditional execution prefixes appear at the beginning of the line,
but after one or more blanks (PASM does not require the blanks).

@item
Effect affixes always appear at the end of the instruction.

@item
All hardware-defined instructions of the Propeller processor are
always available.  If LMM mode is enabled, certain pseudo-instructions
are available.  See below for details. In compressed mode
the LMM pseudo-instructions are available, as well as a few additional ones.

@end table

@node Propeller-Chars
@subsection Special Characters

@cindex line comment character, Propeller
@cindex Propeller line comment character
The presence of a @samp{'} on a line indicates the start of a comment
that extends to the end of the current line.  If a @samp{#} appears as
the first character of a line, the whole line is treated as a comment.

@cindex line separator, Propeller
@cindex statement separator, Propeller
@cindex Propeller line separator
The @samp{;} character can be used instead of a newline to separate
statements.

@cindex immediate character, Propeller
@cindex Propeller immediate character
The character @samp{#} is used to indicate immediate operands.

@cindex identifiers, Propeller
@cindex Propeller identifiers
Symbols start with a letter, underscore, or period and continue with
those characters plus decimal digits. Symbols beginning with ``L''
are considered local symbols and are not exported to object files
(unless there is an explicit @code{.global} directive for them).

@node Propeller-Regs
@subsection Register Names

@cindex Propeller register names
@cindex register names, Propeller
The Propeller family of processors is unusual in that it has 512
registers, which also hold the executable code (see the
@cite{Propeller reference manual}). This is the COG RAM.
Most memory models put a
small interpreter into COG RAM which loads code from the larger hub
or external memory and executes it. 

For the benefit of the C compiler certain registers are predefined and
reserved by the assembler. These are at the beginning of COG RAM, and
are named @code{r0}-@code{r15}, @code{sp}, and @code{pc}. @code{r15}
is also called @code{lr} (``link register'') as it conventionally
holds the return address for function calls. @code{sp} is used by the
C compiler for the stack pointer, and @code{pc} is used by
interpreters to point to the instructions to fetch and execute. (Do
not confuse the @code{pc} register with the hardare instruction
pointer, which is not directly addressable.)

@node Propeller Floating Point
@section Floating Point

@cindex floating point, Propeller (@sc{ieee})
@cindex Propeller floating point (@sc{ieee})
The Propeller family uses @sc{ieee} floating-point numbers. 32 and 64
bit floating point formats are available.

@node Propeller Directives
@section Propeller Machine Directives

@cindex machine directives, Propeller
@cindex Propeller machine directives
@table @code

@c AAAAAAAAAAAAAAAAAAAAAAAAA
@c BBBBBBBBBBBBBBBBBBBBBBBBBB
@c CCCCCCCCCCCCCCCCCCCCCCCCCC

@cindex @code{.compress} directive, Propeller
@item .compress @var{type}

Turns compressed instruction mode on or off. In compressed mode PASM
instructions (or sequences of instructions) are represented as
bytecodes which take up about half as much space, but cannot be
directly executed by the processor -- instead they are interpreted by
the CMM kernel.

@var{type} may be one of @code{on}, @code{off}, or
@code{default}. @code{default} restores the compression setting to
whatever was specified on the command line. The typical use for this
is for sequences of code that are intended to be loaded into COG
memory and executed directly, either in FCACHE or in another COG;
these would be written as:
@smallexample
        .compress off
        '' COG code goes here; it cannot be compressed because
        '' it will be directly executed by the processor
        ...
        .compress default
        '' we return here to normal LMM or CMM code
@end smallexample

@c DDDDDDDDDDDDDDDDDDDDDDDDDD
@c EEEEEEEEEEEEEEEEEEEEEEEEEE
@c FFFFFFFFFFFFFFFFFFFFFFFFFF

@anchor{propeller_fit}
@cindex @code{.fit} directive, Propeller
@item .fit @var{exp}
This directive is included for compatibility with PASM.  Has no
effect; the linker will check memory regions for fit at link time.

@c GGGGGGGGGGGGGGGGGGGGGGGGGG
@c HHHHHHHHHHHHHHHHHHHHHHHHHH
@c IIIIIIIIIIIIIIIIIIIIIIIIII
@c JJJJJJJJJJJJJJJJJJJJJJJJJJ
@c KKKKKKKKKKKKKKKKKKKKKKKKKK
@c LLLLLLLLLLLLLLLLLLLLLLLLLL
@c MMMMMMMMMMMMMMMMMMMMMMMMMM
@c NNNNNNNNNNNNNNNNNNNNNNNNNN
@c OOOOOOOOOOOOOOOOOOOOOOOOOO
@c PPPPPPPPPPPPPPPPPPPPPPPPPP
@c QQQQQQQQQQQQQQQQQQQQQQQQQQ
@c RRRRRRRRRRRRRRRRRRRRRRRRRR

@cindex @code{.res} directive, Propeller
@item .res @var{n}
Reserves 4*@code{n} bytes at the current address (or just 4 bytes if
@var{n} is omitted. This actually causes zero bytes
to be generated at present, although in the future this may
change to the ``proper'' behavior of simply advancing the location
counter by the appropriate amount.

@c SSSSSSSSSSSSSSSSSSSSSSSSSS
@c TTTTTTTTTTTTTTTTTTTTTTTTTT
@c UUUUUUUUUUUUUUUUUUUUUUUUUU
@c VVVVVVVVVVVVVVVVVVVVVVVVVV
@c WWWWWWWWWWWWWWWWWWWWWWWWWW
@c XXXXXXXXXXXXXXXXXXXXXXXXXX
@c YYYYYYYYYYYYYYYYYYYYYYYYYY
@c ZZZZZZZZZZZZZZZZZZZZZZZZZZ

@end table

@node Propeller Opcodes
@section Opcodes

@cindex Propeller opcodes
@cindex opcodes for Propeller
@code{@value{AS}} implements all the standard Propeller opcodes.  It
also implements several pseudo opcodes, including several synthetic
instructions for LMM mode.

@table @code

@cindex @code{BRS <label>} pseudo op, Propeller
@item BRS
@smallexample
  brs target
@end smallexample

This pseudo op performs a short PC-relative branch in LMM or CMM
mode. In LMM mode it expands to an add or subtract of the PC register
(and hence can reach +-512 bytes); in CMM mode it assembles to a
compressed branch with a 1 byte signed offset.

@cindex @code{BRW <label>} pseudo op, Propeller
@item BRW
@smallexample
  brw target
@end smallexample

This pseudo op performs an absolute branch in LMM and CMM modes.

@cindex @code{FCACHE <exp>} pseudo op, Propeller
@item FCACHE
@smallexample
  fcache #(end - start)
  .compress off
start
   ...
end
  .compress default
@end smallexample

@code{FCACHE} calls the function @code{__LMM_FCACHE_LOAD} to load a
sequence of code into the FCACHE region in COG memory and then execute
it. This is used by the C compiler to optimize small loops, as it
permits them to execute without interpreter overhead. In CMM mode this
expands to a single CMM instruction. Note that it is important to
disable instruction compression for instructions to be loaded into
FCACHE, since they are directly executed by the processor and not the
interpreter.

@cindex @code{LDI reg,#<exp>} pseudo op, Propeller
@item LDI
@smallexample
  ldi <reg> , <expression>
@end smallexample

@code{LDI} expands in LMM mode into a move from the next address and a constant
that decodes as a NOP. This is similar to @code{MVI} but may be slightly
faster in LMM mode, and @code{reg} does not have to be one of the 15
general purpose registers.

@cindex @code{LEASP reg, #<exp>} pseudo op, Propeller
@item LEASP
@smallexample
  leasp <reg>, #<exp>
@end smallexample

@code{LEASP} adds a positive constant offset between 0 and 511 to the
SP register and puts the result into the destination general purpose
register (@code{r0}--@code{r15}). In LMM mode this expands to
@smallexample
  mov  reg, SP
  add  reg, #<exp>
@end smallexample
In CMM mode it expands to a special 3 byte instruction.

@cindex @code{lpushm #n} pseudo op, Propeller
@item LPUSHM
@smallexample
  lpushm #(x<<4)+y
@end smallexample
Push multiple registers onto the stack. 
The upper 4 bits (@var{x}) of the immediate operand gives the number
of register to push, and the lower 4 bits (@var{y}) gives the first
register to push. Registers are pushed from low register first,
that is, the register number increments as the stack decrements. So
for example to push registers 10--15 inclusive, the immediate value
should be @code{10 + (6<<4)}, or @code{0x6A}.

@cindex @code{lpopm #n} pseudo op, Propeller
@item LPOPM
@smallexample
  lpopm #(x<<4)+y
@end smallexample
Pop multiple registers from the stack. 
The upper 4 bits (@var{x}) of the immediate operand gives the number
of register to push, and the lower 4 bits (@var{y}) gives the first
register to push. Registers are popped from high register first, so
the value @var{x} should be the highest register in the set, so for
example to pop registers 10--15 inclusive, the immediate value should
be @code{15 + (6<<4)}, or @code{0x6F}.

@cindex @code{lpopret #n} pseudo op, Propeller
@item LPOPRET
@smallexample
  lpopret #(x<<4)+y
@end smallexample
Pop multiple registers from the stack, then return by jumping to the
(possibly new) value in the link register @code{lr}.
The upper 4 bits (@var{x}) of the immediate operand gives the number
of register to push, and the lower 4 bits (@var{y}) gives the first
register to push. Registers are popped from high register first, so
the value @var{x} should be the highest register in the set, so for
example to pop registers 10--15 inclusive, the immediate value should
be @code{0x5F}.


@cindex @code{MOVA reg,#<exp>} pseudo op, Propeller
@item MOVA
@smallexample
  mova <reg>, #<exp>
@end smallexample
This is exactly the same as the @code{MOV} instruction, except that
the constant expression is divided by 4. This is useful for assembly
code that manipulates COG addresses, which are always long word rather
than byte addresses.

@cindex @code{MVI reg,#<exp>} pseudo op, Propeller
@item MVI
@smallexample
  mvi <reg>, #<exp>
@end smallexample

Expands to a sequence which moves a 32 bit constant value into general
purpose register @code{reg}. This works only for @code{r0} through
@code{r14} and @code{lr}.

@cindex @code{MVIW reg,#<exp>} pseudo op, Propeller
@item MVIW
@smallexample
  mviw <reg>, #<exp>
@end smallexample

Expands to a sequence which moves a 16 bit constant into general
purpose register @code{reg}. This works only for @code{r0} through
@code{r14} and @code{lr}. In LMM mode this expands to the same
sequence as @code{MVI}, but in CMM mode it expands to a smaller
sequence (3 bytes versus 5 bytes).

@cindex @code{XMMIO <op>, reg, reg} pseudo op, Propeller
@item XMMIO
@smallexample
  xmmio rdbyte, <dstreg>, <srcreg>
@end smallexample

In XMM mode this expands to a load or store from external
memory. @code{op} is the load or store operation that we are
simulating; for example, @code{rdbyte} will read one byte from
external memory. The actual code generated is a call to the
@code{__LMM_RDBYTEI} function (or similar XMM kernel function for
opcodes other than @code{rdbyte}).

@end table

For information on the Propeller instruction set, see @cite{Propeller
reference manual}, Parallax, Inc.
